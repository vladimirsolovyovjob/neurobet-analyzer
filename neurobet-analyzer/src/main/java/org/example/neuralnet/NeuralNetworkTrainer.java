package org.example.neuralnet;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.logging.*;

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø—É—Ç–µ–º –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
 * –Ω–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å, —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ –≤–µ—Å –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ–µ–º.
 * 
 * –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ.
 * 
 * –ê–≤—Ç–æ—Ä: –°–æ–ª–æ–≤—å–µ–≤ –í–ª–∞–¥–∏–º–∏—Ä –ù–∏–∫–æ–ª–∞–µ–≤–∏—á, 01.03.1989
 */
public class NeuralNetworkTrainer {

    private static final Logger LOGGER = Logger.getLogger(NeuralNetworkTrainer.class.getName());

    static {
        ConsoleHandler handler = new ConsoleHandler();
        handler.setLevel(Level.ALL);
        handler.setFormatter(new SimpleFormatter());
        LOGGER.setUseParentHandlers(false);
        LOGGER.addHandler(handler);
        LOGGER.setLevel(Level.INFO);
    }

    public static void main(String[] args) throws IOException {

        List<Double> successfulScores = new ArrayList<>();
        NeuralNetwork neuralNetwork = new NeuralNetwork();

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
        List<String> validationLines = Files.readAllLines(Paths.get("C:/basketball_training_set.txt"));
        int totalLines = validationLines.size();

        // === –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
        
        // –ú–∞—Å—Å–∏–≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤ –º–µ–∂–¥—É –≤—Ö–æ–¥–Ω—ã–º –∏ —Å–∫—Ä—ã—Ç—ã–º —Å–ª–æ—è–º–∏
        double[] possibleInitialWeights = {0.001, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9};

        // –ú–∞—Å—Å–∏–≤ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è (learning rate)
        double[] possibleLearningRates = {0.1, 0.2, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01};

        // –ú–∞—Å—Å–∏–≤ –≤–µ—Å–æ–≤ –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º –∏ –≤—ã—Ö–æ–¥–Ω—ã–º —Å–ª–æ—è–º–∏ (–≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å)
        double[] possibleHiddenToOutputWeights = {0.001, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9};

        int trainingCycles = 100;

        long startTime = System.currentTimeMillis();
        long checkpointTime = startTime;

        LOGGER.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...");

        neuralNetwork.setNumTrainingCycles(trainingCycles);

        for (double inputWeight : possibleInitialWeights) {
            for (double learningRate : possibleLearningRates) {
                for (double hiddenWeight : possibleHiddenToOutputWeights) {

                    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                    neuralNetwork.setInitialWeight(inputWeight);
                    neuralNetwork.setLearningRate(learningRate);
                    neuralNetwork.setInitialHiddenWeight(hiddenWeight);

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                    neuralNetwork.initializeNeuralNetwork();
                    neuralNetwork.training("C:/basketball_training_set.txt");

                    int correctCount = 0;

                    for (String line : validationLines) {
                        byte[] input = new byte[299];
                        for (int i = 0; i < line.length() - 1; i++) {
                            input[i] = Byte.parseByte(String.valueOf(line.charAt(i)));
                        }
                        byte result = (byte) line.charAt(line.length() - 1);

                        String prediction = neuralNetwork.run(input);

                        if ((prediction.equals("–°—Ç–∞–≤–∏–º") && result == '1') ||
                            (prediction.equals("–û—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞–≤–∫–∏") && result == '0')) {
                            correctCount++;
                        }
                    }

                    double accuracy = (correctCount / (double) totalLines) * 100;

                    LOGGER.info(String.format(
                            "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –≤—Ö–æ–¥–Ω–æ–π –≤–µ—Å = %.3f, —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è = %.3f, —Å–∫—Ä—ã—Ç—ã–π‚Üí–≤—ã—Ö–æ–¥–Ω–æ–π = %.3f | –¢–æ—á–Ω–æ—Å—Ç—å: %.2f%%",
                            inputWeight, learningRate, hiddenWeight, accuracy));

                    if (accuracy > 70.0) {
                        LOGGER.info("üéØ –í–´–°–û–ö–ê–Ø –¢–û–ß–ù–û–°–¢–¨: " + accuracy);
                        successfulScores.add(accuracy);
                    } else if (accuracy > 62.0) {
                        LOGGER.info("‚úÖ –¶–µ–ª–µ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: " + accuracy);
                        successfulScores.add(accuracy);
                    }
                }

                long currentTime = System.currentTimeMillis();
                if (currentTime - checkpointTime >= 6 * 60 * 60 * 1000) {
                    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                    Collections.sort(successfulScores);
                    LOGGER.info("‚è≥ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —É—Å–ø–µ—à–Ω—ã–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: " + successfulScores);
                    checkpointTime = currentTime;
                }
            }
        }

        Collections.sort(successfulScores);
        LOGGER.info("üéâ –§–∏–Ω–∞–ª—å–Ω—ã–µ –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: " + successfulScores);

        long endTime = System.currentTimeMillis();
        long executionTimeMillis = endTime - startTime;
        long minutes = (executionTimeMillis / 1000) / 60;
        long seconds = (executionTimeMillis / 1000) % 60;

        LOGGER.info(String.format("‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %d –º–∏–Ω %d —Å–µ–∫", minutes, seconds));
    }
}
